#!/bin/groovy
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

def search(config, jiraPwd) {

    searchQuery = "project = REL AND summary ~ \"${config.appName} - ${config.version}\""
    if (config.exactJiraSearch) {
        searchQuery = "project = REL AND summary ~ '\\\"${config.appName} - ${config.version}\\\"'"
    }

    def searchMap = [
        "jql": "${searchQuery}",
        "startAt": 0,
        "maxResults": 1
    ]
    println("Map status: ${searchMap}")

    def json = new JsonBuilder(searchMap).toString()
    writeJSON file: 'search.json', json: json
    r = sh(script: 'curl -S -s -u <USERNAME>:$jiraPwd -X POST --data @search.json -H \'Accept: application/json\' -H \'Content-Type: application/json\'' + " ${config.jiraURL}/rest/api/2/search", returnStdout: true)
    JsonSlurper slurper = new JsonSlurper()
    Map parsedJson = slurper.parseText(r)

    if (parsedJson.issues?.size() > 0) {
        return parsedJson.issues[0].key
    } else {
        println("Could not find a JIRA ticket associated with this release version")
        return null
    }
}

def create(config, jiraPwd) {

    def createMap = [
        "fields": [
            "project": [
                "key": "REL"
            ],
            "summary": "${config.appName} - ${config.version}",
            "description": """{panel:title=Release Details|borderStyle=dashed|borderColor=#ccc|titleBGColor=#BDBDBD|bgColor=#F2F2F2}
                _Automated release ticket generated by Jenkins Shared Library_
                Application: ${config.appName}
                Release Version: ${config.version}
                ----
                [*Fix Version*|${config.jiraURL}/projects/${config.jiraProject}]
                [*GitHub*|https://github.com/<COMPANY>/${config.repoName}]
                {panel}
            """,
            "issuetype": [
                "name": "Automated Release"
            ]
        ]
    ]
    def json = new JsonBuilder(createMap).toString()

    writeJSON file: 'create.json', json: json
    r = sh(script: 'curl -S -s -u <USERNAME>:$jiraPwd -X POST --data @create.json -H \'Accept: application/json\' -H \'Content-Type: application/json\'' + " ${config.jiraURL}/rest/api/2/issue", returnStdout: true)
    JsonSlurper slurper = new JsonSlurper()
    Map parsedJson = slurper.parseText(r)

    return parsedJson.key
}

def transistion(config, jiraPwd) {

    def transistionMap = [
        "transition": [
            "id": "${config.envDefaults.transistionId}"
        ]
    ]
    def json = new JsonBuilder(transistionMap).toString()

    writeJSON file: 'transition.json', json: json
    r = sh(script: 'curl -S -s -u <USERNAME>:$jiraPwd -X POST --data @transition.json -H \'Accept: application/json\' -H \'Content-Type: application/json\'' + " ${config.jiraURL}/rest/api/2/issue/${config.jiraTicketNum}/transitions", returnStdout: true)
}

def comment(config, jiraPwd) {

    def commentMap = [
        "body": """{panel:title=${config.envName.toUpperCase()} Deployment|borderStyle=dashed|borderColor=#ccc|titleBGColor=#BDBDBD|bgColor=#F2F2F2}
            Version ${config.version} has been deployed to ${config.envName.toUpperCase()}
            [*Jenkins Build*|${env.BUILD_URL}]
            {panel}
        """
    ]
    def json = new JsonBuilder(commentMap).toString()

    writeJSON file: 'comment.json', json: json
    r = sh(script: 'curl -S -s -u <USERNAME>:$jiraPwd -X POST --data @comment.json -H \'Accept: application/json\' -H \'Content-Type: application/json\'' + " ${config.jiraURL}/rest/api/2/issue/${config.jiraTicketNum}/comment", returnStdout: true)
}

def getApproval(config, jiraPwd) {

    r = sh(script: 'curl -S -s -u <USERNAME>:$jiraPwd -X GET -H \'Accept: application/json\'' + " ${config.jiraURL}/rest/api/2/issue/${config.jiraTicketNum}?expand=changelog", returnStdout: true)
    JsonSlurper slurper = new JsonSlurper()
    Map parsedJson = slurper.parseText(r)
    println("Ticket status: ${parsedJson.fields.status.name}")

    for (log in parsedJson.changelog.histories) {
        for (item in log.items) {
            if (item.toString == "Approved for Production") {
                def ticketApprover = log.author.displayName
                println("Deployment approved by: ${ticketApprover}")
                return ticketApprover
            }
        }
    }
    error "getApproval() was called but acquired ticket was not approved!"
}